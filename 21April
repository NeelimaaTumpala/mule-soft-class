url : https://developer.mulesoft.com/learn/dataweave/

**json to json**
//payload

{
    "message": "Hello world!"
}

//script

%dw 2.0
output application/json
---
payload.message

//output

"Hello world!"

//script

%dw 2.0
output application/json
---
payload

//output

{
  "message": "Hello world!"
}

**josn to xml**

//payload

"Hello world!"

//script

%dw 2.0
output application/xml
---
payload

//output

<?xml version='1.0' encoding='UTF-8'?>
<message>Hello world!</message>

**string to number**

//payload

{
    "message": "Hello world!",
    "PhoneNo":"9885787412"
}

//script

%dw 2.0
output application/json
---
payload.PhoneNo as Number

//output

9885787412

**subString from a string**
//payload
{
    "message": "Hello world!",
    "PhoneNo":"9885787412"
}


//script

%dw 2.0
import * from dw::core::Strings
output application/json
---
substring(payload.PhoneNo,0,7) as Number

//output

9885787

** to get even numbers from a array**

//paylaod
[1,2,3,4,5]

//script
%dw 2.0
output application/json
---
filter(payload,isEven)

//output
[
  2,
  4
]

**to get odd numbers from a array**
//payload
[1,2,3,4,5]

//script
%dw 2.0
output application/json
---
filter(payload,isOdd)

//output
[
  1,
  3,
  5
]

**to combine two or more arrays**
//script
%dw 2.0
output application/json
var array1=['Mule']
var array2=['Soft']
var array3=['Training']
var flattenExample = [array1,array2,array3]
---
flatten(flattenExample)

//output
[
  "Mule",
  "Soft",
  "Training"
]

**to get current date and time**
//script
%dw 2.0
output application/json
---
"currentDateTime" : now()

//output
{
  "currentDateTime": "2022-04-21T08:49:31.167743Z"
}

** to skip null values**
//script
%dw 2.0
output application/json skipNullOn = "everywhere"
---
{
    "currentDateTime" : now(),
    "temperature" : "45",
    "city" : null
}


//output
{
  "currentDateTime": "2022-04-21T08:51:55.571866Z",
  "temperature": "45"
}

**to mask values**
//script
%dw 2.0
import * from dw::util::Values
output application/json
var info = {"name": "Neelu",
            "password":"1234",
            "email": "123@gmail.com"} 
---
(info mask "password" with "***")

//output
{
  "name": "Neelu",
  "password": "***",
  "email": "123@gmail.com"
}

**to remove a value from array**
//script
%dw 2.0
import * from dw::util::Values
output application/json
var info = {"name": "Neelu",
            "password":"1234",
            "email": "123@gmail.com"} 
---
{
    "updateInfo" : info - "email"
}

//output
{
  "updateInfo": {
    "name": "Neelu",
    "password": "1234"
  }
}

**to know type of info**
//script
%dw 2.0
import * from dw::util::Values
output application/json
var info = {"name": "Neelu",
            "password":"1234",
            "email": "123@gmail.com"} 
---
{
    "typeOf":typeOf(info)
}

//output
{
  "typeOf": "Object"
}

**sizeOf**
//script
%dw 2.0
import * from dw::util::Values
output application/json
var info = {"name": "Neelu",
            "password":"1234",
            "email": "123@gmail.com"} 
---
{
    "sizeOf":sizeOf(info)
}

//output

{
  "sizeOf": 3
}

**splitBy**
//script
%dw 2.0
import * from dw::util::Values
output application/json
var info = "mule-soft"
---
{
    "splitByExample": info splitBy("-")
}

//output

{
  "splitByExample": [
    "mule",
    "soft"
  ]
}

**tritm**
//script

%dw 2.0
import * from dw::util::Values
output application/json
var info = "mule-soft"
---
{
    "trimExample": trim(info) 
}

//output

{
  "trimExample": "mule-soft"
}

**encription**
//script
%dw 2.0
import dw::Crypto
import toBase64 from dw::core::Binaries
import fromBase64 from dw::core::Binaries
output application/json
var plainText = "Name"
var encrptedText = "TmFtZQ=="
---
{
    "encryptExample": toBase64(plainText),
    "decryptExample": fromBase64("TmFtZQ==")
}

//output

{
  "encryptExample": "TmFtZQ==",
  "decryptExample": "Name"
}


**mapping**

//payload
{
        "ID" : "1",
        "Name" : "AJ"
    },
    {
        "ID" : "2",
        "Name" : "Hari"
    },
    {
        "ID" : "3",
        "Name" : "Neelu"
    },
    {
        "ID" : "4",
        "Name" : "Lilly"
    }
    
//script
%dw 2.0
output application/json
---
payload map()->{
    ID:$.ID,
    Name:$.Name ++ " " ++ "Capg"
}

//output 
[
  {
    "ID": "1",
    "Name": "AJ Capg"
  },
  {
    "ID": "2",
    "Name": "Hari Capg"
  },
  {
    "ID": "3",
    "Name": "Neelu Capg"
  },
  {
    "ID": "4",
    "Name": "Lilly Capg"
  }
]

//another way

//payload
[
  {
    "ID": "1",
    "Name": "AJ Capg"
  },
  {
    "ID": "2",
    "Name": "Hari Capg"
  },
  {
    "ID": "3",
    "Name": "Neelu Capg"
  },
  {
    "ID": "4",
    "Name": "Lilly Capg"
  }
]

//script

%dw 2.0
output application/json
---
payload map(key,value)->{
    ID:key.ID,
    Name:key.Name ++ " " ++ "Capg"
}

//output

[
  {
    "ID": "1",
    "Name": "AJ Capg"
  },
  {
    "ID": "2",
    "Name": "Hari Capg"
  },
  {
    "ID": "3",
    "Name": "Neelu Capg"
  },
  {
    "ID": "4",
    "Name": "Lilly Capg"
  }
]


**mapObject**
//payload

{
    "pet" : "cat",
    "Name": "lappy"
}
    


//script

%dw 2.0
output application/json
---
payload mapObject ((value, key, index) -> element:{
    index:index,
    key:key++"modified",
    value:value
} )


//output
{
  "element": {
    "index": 0,
    "key": "petmodified",
    "value": "cat"
  },
  "element": {
    "index": 1,
    "key": "Namemodified",
    "value": "lappy"
  }
}

//another way
//payload
[
    {
    "PET" : "cat",
    "NAME": "lappy"
    },
    {
        "PET":"dog",
        "NAME":"Buddy"
    }
  
]
  


//script


%dw 2.0
output application/json
---
payload map((item,index)->
item mapObject((value,key,index)->
{
    (lower(key)): upper(value)
}
)
)

//output

[
  {
    "pet": "CAT",
    "name": "LAPPY"
  },
  {
    "pet": "DOG",
    "name": "BUDDY"
  }
]




**********Notes given by M Khan sir****************
**JSON to XML**

output application/json

**convert String to Integer**

payload.phone_number as Number

**substring from a string**

import * from dw::core::Strings
substring(payload.phone_number, 1,3) as Number

**How to get even and odd number from an array**

For Odd : filter(payload, isOdd)
For Even : filter(payload, isEven)

map       -  iterates over an array and returns an array
mapObject -	 iterates over an object and returns as object
pluck	  -  iterates over an object and returns an array of keys or values or indices in that object
flatten   -  used to merge 2 arrays into single array

**example for flatten**

%dw 2.0
output application/json
var array1 = ['Mule']
var array2 = ['Soft']
var flattenExample = [array1,array2]
---
flatten(flattenExample)

**for getting current date and time**

"currentDateTime": now()

**for skipping null values**

%dw 2.0
output application/json skipNullOn = "everywhere"
---
{
    "currentDateTime": now(),
    "temperature": "45",
    "city": null
}

**for hiding sensitive info**

%dw 2.0
import * from dw::util::Values
output application/json 
var info = {"name": "parth",
            "password": "1234",
            "email": "123@gmail.com"}
---
(info mask  "password" with "***")

**for not sending a particular field**

%dw 2.0
import * from dw::util::Values
output application/json 
var info = {"name": "parth",
            "password": "1234",
            "email": "123@gmail.com"}
---
{
    "updatedInfo": info - "email"
}

**size of array**

"sizeOf": sizeOf(payload)

**type of **

"typeOf": typeOf(info)

**split by**

%dw 2.0
import * from dw::util::Values
output application/json 
var info = "mule-soft"
---
{
    "splitByExample": info splitBy("-")
}

**trim**

%dw 2.0
import * from dw::util::Values
output application/json 
var info = " mule-soft "
---
{
    "trimExample": trim(info)
}

**encryption**

%dw 2.0
import dw::Crypto
import toBase64 from dw::core::Binaries
import fromBase64 from dw::core::Binaries

output application/json 
var plainText = "Name"
var encryptedText = "TmFtZQ=="
---
{
    "encryptExample": toBase64(plainText),
    "decryptExample": fromBase64("TmFtZQ==")
}
