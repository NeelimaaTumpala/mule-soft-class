//Today's chat

1) Recursive
2) Pattern Matching
3) Change the frequency
4) Auto Delete
5) Moving and Renaming

Renaming 
 
attributes.fileName ++ '_processed'

Assignment 1 - Create a mule project that should take two numbers as an input and operation as json, do the operation in 1 transfor message and transform into xml. Show response. Deploy to cloudhub and validate the output.
    Add logger and print original payload and after operation as well. 
Assignment 2 - 1. Create one java class Sales. Add a method : getAmount() -> A public method returning String value. If the value of size field is "S" ,it should return  amount 30$, if the size is "M" it should return 50$ else 80$.
            Invoke  get Amount() method in getAmount flow to know the amount related details. Final output should have amount concatenated with String. 
 
Sample Input: Payload: { "quantity": 1, "size": "M" }
Sample Output: Total Amount is : 50$.
 
User choice router, correlation id, logger connector.




************calculating new salary with hike*************************
//payload
[
    {
        "Fname": "so",
        "Lname": "kai",
        "salary": 56000,
        "hike": 12,
        "married": true
    },
    {
        "Fname": "shin",
        "Lname": "moon",
        "salary": 76000,
        "hike":11,
        "married": false
    },
    {
        "Fname": "mango",
        "Lname": "lilly",
        "salary": 87000,
        "hike": 10,
        "married": true
    }

]

//script

%dw 2.0
output application/json
---
payload map((item, index)->{
    name:item.Fname++" " ++ item.Lname,
    company:"capgemini",
    salary: ((item.salary*item.hike)/100)+item.salary,
    married:item.married
})

//output

[
  {
    "name": "so kai",
    "company": "capgemini",
    "salary": 62720,
    "married": true
  },
  {
    "name": "shin moon",
    "company": "capgemini",
    "salary": 84360,
    "married": false
  },
  {
    "name": "mango lilly",
    "company": "capgemini",
    "salary": 95700,
    "married": true
  }
]

**************using $, $$, $$$ with pluck***********************
//payload
{
    "name":"AJ",
    "name":"AJ2",
    "name":"AJ3"
}

//script
%dw 2.0
output application/json
---
{
    value: payload pluck $,
    keys: payload pluck $$,
    index: payload pluck $$$
}

//output

{
  "value": [
    "AJ",
    "AJ2",
    "AJ3"
  ],
  "keys": [
    "name",
    "name",
    "name"
  ],
  "index": [
    0,
    1,
    2
  ]
}


******pluck with join*******
//payload
{
    "name":"AJ",
    "name1":"AJ2",
    "name3":
    {
        "prefix" : "mr. ",
        "fname" : "A",
        "midname" : "B",
        "lastname" : "C",
        "suffix" : "junior"
    }
}

//script

%dw 2.0
output application/json
---
{
    name : payload.name,
    name1 : payload.name1,
    name3 : payload.name3 pluck $ joinBy ""
}

//output

{
  "name": "AJ",
  "name1": "AJ2",
  "name3": "mr. ABCjunior"
}

*********pluck with map*******
//paylaod
{
    "name":"AJ",
    "name1":"AJ2",
    "name3":
    {
        "prefix" : "mr. ",
        "fname" : "A",
        "midname" : "B",
        "lastname" : "C",
        "suffix" : "junior"
    }
}

//script

%dw 2.0
output application/json
---
{
    name : payload.name,
    name1 : payload.name1,
    name3 : payload.name3 pluck ((value,key,index) -> value)
}

//output

{
  "name": "AJ",
  "name1": "AJ2",
  "name3": [
    "mr. ",
    "A",
    "B",
    "C",
    "junior"
  ]
}


**********pluck with map with join*********
//pluck
{
    "name":"AJ",
    "name1":"AJ2",
    "name3":
    {
        "prefix" : "mr. ",
        "fname" : "A",
        "midname" : "B",
        "lastname" : "C",
        "suffix" : "junior"
    }
}

//script

%dw 2.0
output application/json
---
{
    name : payload.name,
    name1 : payload.name1,
    name3 : payload.name3 pluck ((value,key,index) -> value)joinBy  " "
}

//output

{
  "name": "AJ",
  "name1": "AJ2",
  "name3": "mr.  A B C junior"
}





